# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_toolbox.ipynb.

# %% auto 0
__all__ = ['tanimoto']

# %% ../nbs/04_toolbox.ipynb 3
from .dataset import Data
from fastbook import *
from rdkit import Chem
from rdkit.Chem import AllChem, DataStructs


# %% ../nbs/04_toolbox.ipynb 4
def tanimoto(df, #pandas DataFrame with SMILES and ID columns.
                         smiles_col='SMILES', #name of the column containing the SMILES strings (default: 'SMILES').
                         id_col='ID', #name of the column containing the molecule IDs (default: 'ID').
                         target_col=None, #name of the column containing the target values (default: None).
                         radius=2, #radius of the Morgan fingerprint (default: 2).
                        ):
    """
    Calculates the Tanimoto similarity scores between all pairs of molecules in a pandas DataFrame.
    
    """

    # Convert SMILES to molecule objects
    df['Molecule'] = df[smiles_col].apply(lambda x: Chem.MolFromSmiles(x))

    # Calculate fingerprints
    df['Fingerprint'] = df['Molecule'].apply(lambda x: AllChem.GetMorganFingerprintAsBitVect(x, radius))

    # Calculate similarity scores
    similarity_scores = []
    for i in range(len(df)):
        for j in range(i+1, len(df)):
            sim_score = DataStructs.TanimotoSimilarity(df['Fingerprint'][i], df['Fingerprint'][j])
            if target_col is not None:
                similarity_scores.append((df[id_col][i], df[id_col][j], df[smiles_col][i], df[smiles_col][j], sim_score, df[target_col][i], df[target_col][j]))
            else:
                similarity_scores.append((df[id_col][i], df[id_col][j], df[smiles_col][i], df[smiles_col][j], sim_score))

    # Create a new DataFrame with the similarity scores
    if target_col is not None:
        result_df = pd.DataFrame(similarity_scores, columns=['ID1', 'ID2', 'SMILES1', 'SMILES2', 'SimilarityScore', 'Target1', 'Target2'])
    else:
        result_df = pd.DataFrame(similarity_scores, columns=['ID1', 'ID2', 'SMILES1', 'SMILES2', 'SimilarityScore'])

    # Sort by similarity score in descending order
    result_df.sort_values('SimilarityScore', ascending=False, inplace=True)
    result_df = result_df.reset_index(drop=True)

    return result_df
