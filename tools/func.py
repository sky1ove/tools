# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_func.ipynb.

# %% auto 0
__all__ = ['smi2prop', 'smi2morgan']

# %% ../nbs/00_func.ipynb 3
import seaborn as sns
import numpy as np
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.ML.Descriptors import MoleculeDescriptors
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.metrics import accuracy_score
import pandas as pd
from rdkit.Chem import Draw
from rdkit.Chem import Descriptors
from sklearn.preprocessing import StandardScaler

# %% ../nbs/00_func.ipynb 4
def smi2prop(df, # df needs to have SMILES an ID columns
             smi_colname = "SMILES",
             id_colname = "ID",
             remove_duplicate=True,
             std = False
            ):
    
    mols = [Chem.MolFromSmiles(smi) for smi in df[smi_colname]]
    desc_names = [desc_name[0] for desc_name in Descriptors.descList]
    desc_calc = MoleculeDescriptors.MolecularDescriptorCalculator(desc_names)
    desc_values = [desc_calc.CalcDescriptors(mol) for mol in mols]
    compound = pd.DataFrame(np.stack(desc_values).T, index=desc_names,columns=df[id_colname])
    if remove_duplicate:
        compound = compound.loc[~compound.duplicated()] # remove duplicates
        compound = compound.loc[compound.std(axis=1) != 0] # remove features that are equal for all compounds
    compound = compound.T.reset_index()
    if std:
        scaler = StandardScaler()
        transformed = scaler.fit_transform(compound.iloc[:,1:])
        compound.iloc[:,1:] = transformed
    return compound

# %% ../nbs/00_func.ipynb 9
def smi2morgan(df,
               smi_colname = "SMILES",
               id_colname = "ID"
              ):
    mols = [Chem.MolFromSmiles(smi) for smi in df[smi_colname]]
    morgan_fps = [AllChem.GetMorganFingerprintAsBitVect(mol, 2, nBits=2048) for mol in mols]
    fp_df = pd.DataFrame(np.array(morgan_fps), index=df[id_colname])
    colnames = [f'morgan_{i}' for i in fp_df.columns]
    fp_df.columns = colnames
    fp_df = fp_df.reset_index()
    return fp_df
